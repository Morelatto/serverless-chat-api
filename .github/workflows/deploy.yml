name: Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        options: [dev, staging, prod]
        default: dev

env:
  PYTHON_VERSION: '3.11'
  TERRAFORM_VERSION: '1.5.0'
  AWS_REGION: 'us-east-1'

jobs:
  deploy-dev:
    if: github.event_name == 'push' || github.event.inputs.environment == 'dev'
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
      - name: Install and test
        run: |
          pip install -e ".[dev,test]"
          ruff check src/
          pytest tests/ --cov=src --cov-fail-under=70
      - name: Check AWS credentials
        id: check-aws
        run: |
          if [ -n "${{ secrets.AWS_ACCESS_KEY_ID }}" ] && [ -n "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
            echo "has_aws=true" >> $GITHUB_OUTPUT
            echo "✅ AWS credentials found"
          else
            echo "has_aws=false" >> $GITHUB_OUTPUT
            echo "⚠️ AWS credentials not configured - skipping deployment"
          fi
      - uses: hashicorp/setup-terraform@v3
        if: steps.check-aws.outputs.has_aws == 'true'
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      - uses: aws-actions/configure-aws-credentials@v4
        if: steps.check-aws.outputs.has_aws == 'true'
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Build Lambda Layer
        if: steps.check-aws.outputs.has_aws == 'true'
        working-directory: iac/terraform
        run: |
          # Install Lambda dependencies directly from pyproject.toml
          rm -rf layer lambda_layer.zip
          mkdir -p layer/python
          
          # Install core dependencies needed for Lambda
          pip install \
            fastapi==0.104.1 \
            mangum==0.17.0 \
            pydantic==2.5.0 \
            pydantic-settings==2.1.0 \
            google-generativeai==0.7.2 \
            openai==1.3.0 \
            tenacity==8.2.3 \
            boto3==1.34.0 \
            python-dotenv==1.0.0 \
            httpx==0.25.2 \
            -t layer/python \
            --platform manylinux2014_x86_64 \
            --implementation cp \
            --python-version 311 \
            --only-binary=:all: \
            --upgrade
          
          # Clean up unnecessary files to reduce layer size
          find layer -type d -name '__pycache__' -exec rm -rf {} + 2>/dev/null || true
          find layer -type d -name '*.dist-info' | head -20 | xargs rm -rf 2>/dev/null || true
          find layer -type d -name 'tests' -exec rm -rf {} + 2>/dev/null || true
          find layer -type f -name '*.pyc' -delete 2>/dev/null || true
      - name: Terraform Init
        if: steps.check-aws.outputs.has_aws == 'true'
        working-directory: iac/terraform
        run: |
          terraform init -reconfigure
      - name: Deploy to AWS
        if: steps.check-aws.outputs.has_aws == 'true'
        working-directory: iac/terraform
        run: |
          # Create tfvars file if it doesn't exist
          if [ ! -f terraform.tfvars.dev ]; then
            cat > terraform.tfvars.dev <<EOF
          environment = "dev"
          EOF
          fi
          
          terraform apply -var-file="terraform.tfvars.dev" \
            -var="gemini_api_key=${{ secrets.GEMINI_API_KEY }}" \
            -var="openrouter_api_key=${{ secrets.OPENROUTER_API_KEY || '' }}" \
            -var="api_key=${{ secrets.API_KEY || '' }}" \
            -auto-approve
          echo "url=$(terraform output -raw lambda_function_url 2>/dev/null || echo '')" >> $GITHUB_OUTPUT
        id: deploy
      - name: Health check
        if: steps.check-aws.outputs.has_aws == 'true' && steps.deploy.outputs.url != ''
        run: |
          sleep 5
          curl -f "${{ steps.deploy.outputs.url }}v1/health" || echo "Health check failed but continuing"

  deploy-staging:
    if: github.event.inputs.environment == 'staging'
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: actions/checkout@v4
      - run: echo "Staging deployment not configured yet"

  deploy-prod:
    if: github.event.inputs.environment == 'prod'
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - uses: actions/checkout@v4
      - run: echo "Production deployment not configured yet"