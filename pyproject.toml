[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "chat-api-itau"
version = "3.0.0"
description = "Microservice for processing prompts with LLM integration"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Ita√∫ AI Platform Team"},
]
keywords = ["api", "llm", "chat", "serverless"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "fastapi==0.115.6",
    "uvicorn[standard]==0.34.0",
    "pydantic==2.10.5",
    "pydantic-settings==2.7.0",
    "mangum==0.19.0",
    "google-generativeai==0.8.4",
    "httpx==0.28.1",
    "tenacity==9.0.0",
    "boto3==1.36.9",
    "python-dotenv==1.0.1",
    "pythonjsonlogger==3.2.1",
]

[project.optional-dependencies]
dev = [
    "pytest==8.3.5",
    "pytest-asyncio==0.25.1",
    "pytest-cov==6.0.0",
    "black==25.1.0",
    "ruff==0.9.1",
    "mypy==1.14.1",
    "types-python-dateutil",
    "types-requests",
]
test = [
    "pytest==8.3.5",
    "pytest-asyncio==0.25.1",
    "pytest-cov==6.0.0",
    "httpx==0.28.1",
]
aws = [
    "awslambdaric==3.0.0",
]

[project.scripts]
chat-api = "src.main:run"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/README.md",
    "/LICENSE",
]

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py311"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
]
ignore = [
    "E501", # line too long (handled by black)
    "B008", # do not perform function calls in argument defaults
    "B904", # raise ... from ... in except blocks
]
exclude = [
    ".git",
    "__pycache__",
    "dist",
    "build",
    ".venv",
]

[tool.ruff.isort]
known-first-party = ["src", "chat", "shared"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
check_untyped_defs = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
pythonpath = ["."]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]