[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "chat-api-itau"
version = "3.0.0"
description = "Microservice for processing prompts with LLM integration"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [{name = "Ita√∫ AI Platform Team"}]
keywords = ["api", "llm", "chat", "serverless"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "fastapi==0.115.6",
    "uvicorn[standard]==0.34.0",
    "pydantic==2.10.5",
    "pydantic-settings==2.7.0",
    "mangum==0.19.0",
    "google-generativeai==0.8.4",
    "httpx==0.28.1",
    "tenacity==9.0.0",
    "boto3==1.36.9",
    "python-dotenv==1.0.1",
    "pythonjsonlogger==3.2.1",
]

[project.optional-dependencies]
dev = [
    "pytest==8.3.5",
    "pytest-asyncio==0.25.1",
    "pytest-cov==6.0.0",
    "ruff==0.9.1",
    "mypy==1.14.1",
    "types-python-dateutil",
    "types-requests",
]
test = [
    "pytest==8.3.5",
    "pytest-asyncio==0.25.1",
    "pytest-cov==6.0.0",
    "httpx==0.28.1",
]
aws = ["awslambdaric==3.0.0"]

[project.scripts]
chat-api = "src.main:run"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.hatch.build.targets.sdist]
include = ["/src", "/tests", "/README.md", "/LICENSE"]

[tool.ruff]
line-length = 100
target-version = "py311"
select = ["E", "W", "F", "I", "B", "C4", "UP", "ARG", "SIM"]
ignore = ["E501"]

[tool.ruff.isort]
known-first-party = ["src", "chat", "shared"]

[tool.mypy]
strict = true
python_version = "3.11"

[tool.pytest.ini_options]
addopts = "-ra -q"
testpaths = ["tests"]
pythonpath = ["."]

[tool.coverage.run]
source = ["src"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "if TYPE_CHECKING:",
]