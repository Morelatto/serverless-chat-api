[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "chat-api"
version = "1.0.0"
description = "A simple LLM chat service with Pythonic design"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [{name = "Chat API Team"}]
keywords = ["api", "llm", "chat", "fastapi", "python"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
]

dependencies = [
    "fastapi>=0.115.0",
    "uvicorn[standard]>=0.32.0",
    "databases[sqlite,postgresql]>=0.9.0",
    "redis[hiredis]>=5.0.0",
    "litellm>=1.55.0",
    "slowapi>=0.1.9",
    "tenacity>=9.0.0",
    "pydantic-settings>=2.6.0",
    "sqlalchemy>=2.0.0",
    "loguru>=0.7.0",
    "orjson>=3.10.0",
    "boto3>=1.35.0",
    "aioboto3>=13.0.0",
    "mangum>=0.17.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=5.0.0",
    "httpx>=0.27.0",
    "ruff>=0.8.0",
    "mypy>=1.13.0",
    "bandit[toml]>=1.8.0",
    "pre-commit>=4.0.0",
    "types-redis>=4.6.0",
    "types-cachetools>=5.5.0",
]

[project.scripts]
chat-api = "chat_api.__main__:main"

[project.urls]
Homepage = "https://github.com/your-org/chat-api"
Repository = "https://github.com/your-org/chat-api.git"
Issues = "https://github.com/your-org/chat-api/issues"

[tool.hatch.build.targets.wheel]
packages = ["chat_api"]

[tool.hatch.build.targets.sdist]
include = ["/chat_api", "/tests", "/README.md", "/LICENSE"]

[tool.ruff]
target-version = "py311"
line-length = 100
fix = true

[tool.ruff.lint]
select = [
    "E4", "E7", "E9", "F",
    "W",
    "I",
    "B", "BLE",
    "S",
    "PERF",
    "SIM", "RET", "RUF", "PTH",
    "ASYNC",
    "UP", "TCH",
]

ignore = [
    "E501",     # Line length
    "S104",     # Bind 0.0.0.0 (Docker)
    "B008",     # FastAPI Depends()
    "TRY003",   # Long exception messages
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["S101", "S105", "ARG001", "ARG002", "PLR2004"]
"*/lambda_handler.py" = ["G004"]
"*/aws.py" = ["ARG002"]

[tool.ruff.lint.isort]
known-first-party = ["chat_api"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
check_untyped_defs = true
no_implicit_optional = true
warn_no_return = true
warn_unreachable = true
disallow_untyped_defs = false
ignore_missing_imports = true
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
check_untyped_defs = true

[tool.bandit]
exclude_dirs = ["tests", ".venv", "venv", "htmlcov"]
skips = ["B101"]

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
pythonpath = ["."]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "session"
addopts = [
    "-ra",
    "--strict-markers",
    "--tb=short",
    "-q",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: integration tests requiring external services",
    "unit: unit tests",
]
filterwarnings = [
    "default",
    "ignore::DeprecationWarning:httpx.*",
    "ignore::DeprecationWarning:litellm.llms.custom_httpx.*",
]

[tool.coverage.run]
source = ["chat_api"]
branch = true
omit = [
    "*/tests/*",
    "*/__main__.py",
    "*/lambda_handler.py",
    "*/aws.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
    "except ImportError:",
]
precision = 2
show_missing = true
skip_covered = false
fail_under = 75
